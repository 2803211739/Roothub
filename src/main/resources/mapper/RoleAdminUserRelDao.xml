<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    <!-- Mybatis会动态实现daoImpl,不过需要在mapper文件夹下创建BookDao.xml和AppointmentDao.xml
  		spring-dao.xml文件会自动扫描mapper文件夹下的配置 -->
    <!-- 
    1.namespace是该xml对应的接口的全名
    2.select和update中的id对应方法名
    3.resultType是返回值类型
    4.parameterType是参数类型(可选)
    5.#{...}填写的是方法的参数 
    6.parameterType:输入参数类型
    7.resultType:输出参数类型
    -->
<mapper namespace="cn.roothub.dao.RoleAdminUserRelDao">
    
	<!-- 根据后台用户ID查询所有的关联关系-->
	<select id="selectAllByAdminUserId" resultType="cn.roothub.entity.RoleAdminUserRel">
		SELECT
        	*
		FROM
			role_admin_user_rel
		WHERE 
			admin_user_id = #{adminUserId}
     </select>
   
     <!-- 根据角色ID查询所有的关联关系 -->
     <select id="selectAllByRoleId" resultType="cn.roothub.entity.RoleAdminUserRel">
		SELECT
        	*
		FROM
			role_admin_user_rel
		WHERE 
			role_id = #{roleId}
     </select>
     
     <!-- 批量新增后台用户与角色的关联关系 -->
     <insert id="insertBatch" parameterType="java.util.Collection">
     	<selectKey resultType ="java.lang.Integer" keyProperty= "roleAdminUserRelId" order= "AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey >
     	INSERT INTO role_admin_user_rel
     		(role_id,admin_user_id,create_date,update_date)
     	VALUES
     	<foreach collection="roleAdminUserRels" item="roleAdminUserRel" separator=",">
     		(#{roleAdminUserRel.RoleId},#{roleAdminUserRel.adminUserId},#{roleAdminUserRel.createDate},#{roleAdminUserRel.updateDate})
     	</foreach>
     </insert>
     
     <!-- 删除后台用户与角色的关联关系 -->
     <delete id="deleteByAdminUserId">
     	DELETE FROM 
     		role_admin_user_rel
     	WHERE 
     		admin_user_id = #{adminUserId}
     </delete>
     
     <!-- 删除后台用户与角色的关联关系 -->
     <delete id="deleteByRoleId">
     	DELETE FROM 
     		role_admin_user_rel
     	WHERE 
     		role_id = #{RoleId}
     </delete>
     
</mapper>